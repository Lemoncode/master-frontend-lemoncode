///-- FUNCTIONS ***********************************************************************************

/*
Las funciones son un tipo especial de OBJETOS üò≤. Al igual que sucede en otros lenguajes, son
elementos invocables que reciben una serie de argumentos y pueden devolver valores.
*/

// SINTAXIS

// Declaraci√≥n b√°sica de una funci√≥n
function saySomething() {
  console.log("hello world");
}

console.log(typeof saySomething); // "function" Aunque en el fondo, es tambi√©n un objeto.

// Declarando par√°metros a la funci√≥n
function saySomething(arg1, arg2) {
  console.log(arg1, arg2);
}
// La invocamos pasandole argumentos a los par√°metros declarados
saySomething("hello", "world"); // hello world
saySomething("hello"); // hello undefined
saySomething(); // undefined undefined

// Es leg√≠timo llamar a una funci√≥n con m√°s argumentos que los que han sido declarados
// Veremos como aprovechar este hecho un poco m√°s abajo.
saySomething("hello", "wonderful", "world"); // hello wonderful

// A√±adiendo valor de retorno
function saySomething(arg1, arg2) {
  console.log(arg1, arg2);
  return arg1 && arg2 ? true : false; // Expresi√≥n equivalente: return Boolean(arg1 && arg2);
}
console.log(saySomething("hello", "world")); // hello world, true
console.log(saySomething("hello")); // hello undefined, false

// VARIADIC FUNCTIONS

// No declaramos par√°metros est√°ticos sino que tomar√° argumentos din√°micos o variables
// (variadic functions) mediante el objeto iterable arguments
function logArguments() {
  console.log(arguments); // "arguments" es un objeto array-like (iterable)
}
logArguments(); // {}
logArguments(true); // {0: true}

// Podemos iterar por "arguments" por comodidad
function logArguments() {
  for (const arg of arguments) {
    console.log(arg);
  }
}
logArguments(1, true, "hello"); // 1, true, hello

// Ejemplo pr√°ctico de utilidad con "arguments"
function sum() {
  let total = 0;
  for (const num of arguments) {
    total += num;
  }
  return total;
}
console.log(sum(1, 2, 3)); // 6;


///-- ARROW FUNCTIONS *****************************************************************************

// SINTAXIS

// Funciones flecha o tambi√©n llamadas "lambda". Siempre son an√≥nimas.
const toUpper = (text) => {
  return text.toUpperCase();
};

// Si solo tenemos la sentencia "return" podemos acortar la funci√≥n y ahorrarnos
// la palabra clave "return" y las llaves:
const toUpper = (text) => text.toUpperCase();

// Tambi√©n podemos omitir los par√©ntesis cuando el argumento es √∫nico:
const toUpper = text => text.toUpperCase();
// S√≥lo cuando es √∫nico, porque sino la coma de separaci√≥n de argumentos se
// podr√≠a confundir con el operador coma.

// En caso de que lo que devuelva sea un objeto literal hay que tener cuidado:
const toObject = (name, surname, age) => {
  return { name, surname, age }
}
// y utilizar par√©ntesis para devolver en la forma corta, ya que las llaves de
// objeto literal se confundir√≠an con las llaves de √°mbito de funci√≥n.
const toObject = (name, surname, age) => ({ name, surname, age })


///-- SIMILITUDES: classic vs arrow  *************************************************************

// *** Ciudadanos de primer orden

/*
Las funciones en javascript, ya sean cl√°sicas o arrow functions, son ciudadanos de primer orden.
En otras palabras, esto significa que pueden ser usadas como cualquier otro valor en:
- Argumento de funciones
- Retorno de funciones
- Asignaci√≥n a variables
 */

// - Funciones como argumentos de otras funciones
function saySomething(text, modifier) {
  console.log(modifier(text));
}
saySomething("HeLlO wOrLd", str => str.toLowerCase()); // hello world
saySomething("hello  world", str => str.replace(/[aeiou]/gi, "")); // hll wrld

// - Funciones como valor de retorno
const createCounter = () => {
  let i = 0;
  return () => console.log(++i);
}
const count = createCounter();
count(); // 1
count(); // 2
count(); // 3

// ‚ö† En este √∫ltimo ejemplo hemos empleado un CLOSURE! Este concepto avanzado se ver√° con m√°s
// detenimiento en la parte avanzada.

///-- DIFERENCIAS: classic vs arrow  *************************************************************

// *** THIS

/*
En javascript, como acabamos de ver, tenemos 2 formas diferentes de declarar funciones, de forma
cl√°sica o mediante arrow functions. ¬øPero por qu√©? ¬øPara qu√© 2 maneras de hacer lo mismo? ¬øEs solo
pura sint√°xis o est√©tica? NO. Uno de los motivos de su exitencia tiene que ver con la keyword
'this'.

- En las funciones cl√°sicas, 'this' hace referencia al contexto que ha invocado a la funci√≥n, es
decir, aquello que la llama, el 'caller'. Luego el 'this' se resuelve en tiempo de ejecuci√≥n
(runtime binding). Est√°n pensadas para ser utilizadas como M√âTODOS.

- En las arrow functions, 'this' ya no es la entidad que la invoca sino que ahora apunta al contexto
l√©xico en el que dicha arrow function ha sido definida. Ya no hay 'runtime binding', se resuelve
en tiempo de desarrollo. Est√°n m√°s pensadas para ser usadas como 'function expressions' ligeras.
 */

function f() {
  console.log(this.age);  // Aqui el contexto es el "caller" de la funci√≥n. this -> caller.
}

// Al hacer la siguiente llamada deb√©is preguntaros ... ¬øqui√©n est√° invocando a la funci√≥n f?
// En este caso en concreto es el contexto global (objeto "window") quien hace la invocaci√≥n.
// Es por ello que, al no tener dicho contexto una propiedad "age", se muestre undefined.
f(); // undefined

// Para demostrar esta teor√≠a, simplemente creemos una una propiedad "age" en el contexto global
// u objeto "window":
age = 35;
// window.age = 35; <= Equivalente
f(); // 35

// Las funciones, adem√°s, disponen de un m√©todo de utilidad con el que invocarlas haciendo que su
// contexto de invocaci√≥n sea lo que nosotros decidamos, por ejemplo, un objeto que tenga 'age':
f.call({ age: 35 }); // 35

// Veamos que sucede ahora en el caso de arrow function. Recordemos que ahora "this" representa el
// contexto l√©xico y por tanto es fijo, sea quien sea quien invoque a la funci√≥n flecha. A efectos
// pr√°cticos, podemos decir que una arrow function toma el contexto del "this" de donde ha sido
// definida.
const g = () => console.log(this.surname);

// Puesto que en el √°mbito global no existe "surname" el resultado ser√° undefined, igual que antes:
g(); // undefined

// La forma de hacer que tengamos algo en la consola es crear una variable global "surname":
surname = "camargo";
g(); // camargo.

// Pero a diferencia de las funciones cl√°sica, puesto que ahora el "this" siempre apunta al √°mbito
// global, PASE LO QUE PASE, no podr√© hacer esto:
surname = "camargo";
g.call({ surname: "calzado" }); // camargo
// No importa que intente invocar la arrow function con un objeto distinto de "window", no tiene
// efecto!


// *** Otras diferencias

// - Las arrow functions no pueden ser 'variadic' y no presentan por tanto la keyword 'arguments'
// Si lo intentamos nos petar√° (OJO en Stackblitz no peta)
const sum = () => {
  return Array.from(arguments).reduce((acc, val) => acc + val);
};
console.log(sum(1, 2, 3)); // Uncaught ReferenceError: arguments is not defined

// Sin embargo, existe una forma de obtener todos los argumentos con forma de array *similar* a 
//arguments. Esto lo veremos m√°s adelante.

// - Las arrow functions no pueden ser funciones constructoras ni presentan la propiedad
// 'prototype'. ‚ö† Entenderemos esto en profundidad m√°s adelante al estudiar el modelo protot√≠pico.
